
-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2

    -- Load and initialize the include file.
    include('Mote-Include.lua')
	include('organizer-lib')
end

-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
    state.Buff["Avatar's Favor"] = buffactive["Avatar's Favor"] or false
    state.Buff["Astral Conduit"] = buffactive["Astral Conduit"] or false
    state.Moving  = M(false, "moving")
	
    spirits = S{"LightSpirit", "DarkSpirit", "FireSpirit", "EarthSpirit", "WaterSpirit", "AirSpirit", "IceSpirit", "ThunderSpirit"}
    avatars = S{"Carbuncle", "Fenrir", "Diabolos", "Ifrit", "Titan", "Leviathan", "Garuda", "Shiva", "Ramuh", "Odin", "Alexander", "Cait Sith"}
-- Any spells placed in magicalRagePacts will force weapons and ammo
    magicalRagePacts = S{
        'Inferno','Earthen Fury','Tidal Wave','Aerial Blast','Diamond Dust','Judgment Bolt','Searing Light','Howling Moon','Ruinous Omen',
        'Fire II','Stone II','Water II','Aero II','Blizzard II','Thunder II',
        'Fire IV','Stone IV','Water IV','Aero IV','Blizzard IV','Thunder IV',
        'Thunderspark','Burning Strike','Meteorite','Nether Blast','Flaming Crush',
        'Meteor Strike','Heavenly Strike','Wind Blade','Geocrush','Grand Fall','Thunderstorm',
        'Holy Mist','Lunar Bay','Night Terror','Level ? Holy','Holy Mist','Lunar Bay','Night Terror','Conflag Strike','Impact'}


    pacts = {}
    pacts.cure = {['Carbuncle']='Healing Ruby'}
    pacts.curaga = {['Carbuncle']='Healing Ruby II', ['Garuda']='Whispering Wind', ['Leviathan']='Spring Water'}
    pacts.buffoffense = {['Carbuncle']='Glittering Ruby', ['Ifrit']='Crimson Howl', ['Garuda']='Hastega', ['Ramuh']='Rolling Thunder',
        ['Fenrir']='Ecliptic Growl'}
    pacts.buffdefense = {['Carbuncle']='Shining Ruby', ['Shiva']='Frost Armor', ['Garuda']='Aerial Armor', ['Titan']='Earthen Ward',
        ['Ramuh']='Lightning Armor', ['Fenrir']='Ecliptic Howl', ['Diabolos']='Noctoshield', ['Cait Sith']='Reraise II'}
    pacts.buffspecial = {['Ifrit']='Inferno Howl', ['Garuda']='Fleet Wind', ['Titan']='Earthen Armor', ['Diabolos']='Dream Shroud',
        ['Carbuncle']='Soothing Ruby', ['Fenrir']='Heavenward Howl', ['Cait Sith']='Raise II'}
    pacts.debuff1 = {['Shiva']='Diamond Storm', ['Ramuh']='Shock Squall', ['Leviathan']='Tidal Roar', ['Fenrir']='Lunar Cry',
        ['Diabolos']='Pavor Nocturnus', ['Cait Sith']='Eerie Eye'}
    pacts.debuff2 = {['Shiva']='Sleepga', ['Leviathan']='Slowga', ['Fenrir']='Lunar Roar', ['Diabolos']='Somnolence'}
    pacts.sleep = {['Shiva']='Sleepga', ['Diabolos']='Nightmare', ['Cait Sith']='Mewing Lullaby'}
    pacts.nuke2 = {['Ifrit']='Fire II', ['Shiva']='Blizzard II', ['Garuda']='Aero II', ['Titan']='Stone II',
        ['Ramuh']='Thunder II', ['Leviathan']='Water II'}
    pacts.nuke4 = {['Ifrit']='Fire IV', ['Shiva']='Blizzard IV', ['Garuda']='Aero IV', ['Titan']='Stone IV',
        ['Ramuh']='Thunder IV', ['Leviathan']='Water IV'}
    pacts.bp70 = {['Ifrit']='Flaming Crush', ['Shiva']='Rush', ['Garuda']='Predator Claws', ['Titan']='Mountain Buster',
        ['Ramuh']='Chaotic Strike', ['Leviathan']='Spinning Dive', ['Carbuncle']='Meteorite', ['Fenrir']='Eclipse Bite',
        ['Diabolos']='Nether Blast',['Cait Sith']='Regal Scratch'}
    pacts.bp75 = {['Ifrit']='Meteor Strike', ['Shiva']='Heavenly Strike', ['Garuda']='Wind Blade', ['Titan']='Geocrush',
        ['Ramuh']='Thunderstorm', ['Leviathan']='Grand Fall', ['Carbuncle']='Holy Mist', ['Fenrir']='Lunar Bay',
        ['Diabolos']='Night Terror', ['Cait Sith']='Level ? Holy'}
    pacts.bp76 = {['Carbuncle']='Holy Mist'}
	pacts.bp78 = {['Fenrir']='Lunar Bay'}
	pacts.bp80 = {['Diabolos']='Night Terror'}
	pacts.bp99 = {['Ramuh']='Volt Strike', ['Titan']='Crag Throw', ['Diabolos']='Blindside',
		['Cait Sith']='Regal Gash', ['Fenrir']='Impact'}
	pacts.astralflow = {['Ifrit']='Inferno', ['Shiva']='Diamond Dust', ['Garuda']='Aerial Blast', ['Titan']='Earthen Fury',
        ['Ramuh']='Judgment Bolt', ['Leviathan']='Tidal Wave', ['Carbuncle']='Searing Light', ['Fenrir']='Howling Moon',
        ['Diabolos']='Ruinous Omen', ['Cait Sith']="Altana's Favor"}

    -- Wards table for creating custom timers   
    wards = {}
    -- Base duration for ward pacts.
    wards.durations = {
        ['Crimson Howl'] = 60, ['Earthen Armor'] = 60, ['Inferno Howl'] = 60, ['Heavenward Howl'] = 60,
        ['Rolling Thunder'] = 120, ['Fleet Wind'] = 120,
        ['Shining Ruby'] = 180, ['Frost Armor'] = 180, ['Lightning Armor'] = 180, ['Ecliptic Growl'] = 180,
        ['Glittering Ruby'] = 180, ['Hastega'] = 180, ['Noctoshield'] = 180, ['Ecliptic Howl'] = 180,
        ['Dream Shroud'] = 180,
        ['Reraise II'] = 3600
    }
    -- Icons to use when creating the custom timer.
    wards.icons = {
        ['Earthen Armor']   = 'spells/00299.png', -- 00299 for Titan
        ['Shining Ruby']    = 'spells/00043.png', -- 00043 for Protect
        ['Dream Shroud']    = 'spells/00304.png', -- 00304 for Diabolos
        ['Noctoshield']     = 'spells/00106.png', -- 00106 for Phalanx
        ['Inferno Howl']    = 'spells/00298.png', -- 00298 for Ifrit
        ['Hastega']         = 'spells/00358.png', -- 00358 for Hastega
        ['Rolling Thunder'] = 'spells/00104.png', -- 00358 for Enthunder
        ['Frost Armor']     = 'spells/00250.png', -- 00250 for Ice Spikes
        ['Lightning Armor'] = 'spells/00251.png', -- 00251 for Shock Spikes
        ['Reraise II']      = 'spells/00135.png', -- 00135 for Reraise
        ['Fleet Wind']      = 'abilities/00074.png', -- 
    }
    -- Flags for code to get around the issue of slow skill updates.
    wards.flag = false
    wards.spell = ''
    
end

-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    state.OffenseMode:options('None', 'Normal', 'Acc','Locked')--press f9 to change, normal will be standard midcast acc is midcast.acc for BP
    state.CastingMode:options('Normal', 'Resistant')
    state.IdleMode:options('none', 'Normal', 'PDT', 'MDT')
    gear.perp_staff = {name="was"}

	
  --  select_default_macro_book()
end


-- Define sets and vars used by this job file.
function init_gear_sets()
    --------------------------------------
    -- Precast Sets
    --------------------------------------
    
    -- Precast sets to enhance JAs
    sets.precast.JA['Astral Flow'] = {head="Glyphic horn"}
    
    sets.precast.JA['Elemental Siphon'] = {back="Conveyance cape"}

    sets.precast.JA['Mana Cede'] = { name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',},
			sub="Umbra Strap",
			ammo="Sancus Sachet",
			head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
			body="Shomonjijoe",
			hands="Inyan. Dastanas +1",
			legs="Helios Spats",
			neck="Caller's Pendant",
			waist="Lucidity Sash",
			Ear2="Evans Earring",
			ring1="Evoker's Ring",
			back={ name="Conveyance Cape", augments={'Summoning magic skill +4','Pet: Enmity+11','Blood Pact ab. del. II -3',}}}

	
			
    -- Pact delay reduction gear
    sets.precast.BloodPactWard = { name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',},
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Convoker's Doublet +3",
    hands="Convokers Bracers +1",
    legs="Helios Spats",
    neck="Caller's Pendant",
    waist="Lucidity Sash",
    Ear2="Evans Earring",
    ring1="Evoker's Ring",
    back={ name="Conveyance Cape", augments={'Summoning magic skill +4','Pet: Enmity+11','Blood Pact ab. del. II -3',}}}

    sets.precast.BloodPactRage = sets.precast.BloodPactWard

    -- Fast cast sets for spells
    
    sets.precast.FC = { name="Grioavolr", augments={'INT+4','Mag. Acc.+26','"Mag.Atk.Bns."+30',},
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Merlinic Hood", augments={'Mag. Acc.+23 "Mag.Atk.Bns."+23','Magic burst dmg.+5%','INT+9','Mag. Acc.+5',}},
    body="Inyanga Jubbah",
    hands="Inyan. Dastanas +1",
    legs={ name="Psycloth Lappas", augments={'MP+80','Mag. Acc.+15','"Fast Cast"+7',}},
    feet="Chelona Boots",
    neck="Caller's Pendant",
    waist="Witful Belt",
    Ear2="Evans Earring",
    ring1="Prolix Ring",
	ring2="Kishar ring",
    back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}}}

    sets.precast.FC['Enhancing Magic'] = set_combine(sets.precast.FC, {waist="Siegel Sash"})

       
    -- Weaponskill sets
    -- Default set for any weaponskill that isn't any more specifically defined
    sets.precast.WS = {}

    -- Specific weaponskill sets.  Uses the base set if an appropriate WSMod version isn't found.
    sets.precast.WS['Myrkr'] = {ammo="Kalboron Stone",
    head="Pixie Hairpin +1",
    body={ name="Witching Robe", augments={'MP+50','Mag. Acc.+15','"Mag.Atk.Bns."+15','"Refresh"+1',}},
    hands={ name="Amalric Gages", augments={'MP+60','Mag. Acc.+15','"Mag.Atk.Bns."+15',}},
    legs={ name="Psycloth Lappas", augments={'MP+80','Mag. Acc.+15','"Fast Cast"+7',}},
    feet="Chelona Boots",
    neck="Caller's Pendant",
    waist="Yamabuki-no-Obi",
    Ear1="Thureous Earring",
    Ear2="Evans Earring",
    ring1="Bifrost Ring",
    ring2="Mephitas's Ring",
    back={ name="Conveyance Cape", augments={'Summoning magic skill +4','Pet: Enmity+11','Blood Pact ab. del. II -3',}}}

    
    --------------------------------------
    -- Midcast sets
    --------------------------------------

    sets.midcast.FastRecast = sets.precast.FC

    sets.midcast.Cure = {main="Iridal Staff",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head="Vanya Hood",
    body="Inyanga Jubbah",
    hands="Inyan. Dastanas +1",
    legs="Gyve Trousers",
    feet="Regal Pumps",
    neck="Henic Torque",
    Ear1="Mendi. Earring",
    Ear2="Gwati Earring",
    ring1="Ephedra Ring",
    ring2="Ephedra Ring",
    back="Solemnity Cape",}

    sets.midcast.Stoneskin = {legs="Haven Hose",
    feet="Regal Pumps",
    neck="Stone Gorget",
    waist="Siegel Sash",
    Ear1="Mendi. Earring",
    Ear2="Earthcry Earring",}

	sets.midcast['Summoning Magic'] = {    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    hands="Inyan. Dastanas +1",
    neck="Melic Torque",
    waist="Lucidity Sash",
    left_ring="Prolix Ring",
    back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}}}
	
    sets.midcast['Elemental Magic'] = {    main={ name="Grioavolr", augments={'INT+4','Mag. Acc.+26','"Mag.Atk.Bns."+30',}},
		sub="Niobid Strap",
		ammo="Kalboron Stone",
		head={ name="Merlinic Hood", augments={'Mag. Acc.+23 "Mag.Atk.Bns."+23','Magic burst dmg.+5%','INT+9','Mag. Acc.+5',}},
		body={ name="Merlinic Jubbah", augments={'Mag. Acc.+20 "Mag.Atk.Bns."+20','Magic burst dmg.+3%','CHR+9','Mag. Acc.+14','"Mag.Atk.Bns."+11',}},
		hands={ name="Amalric Gages", augments={'MP+60','Mag. Acc.+15','"Mag.Atk.Bns."+15',}},
		legs={ name="Merlinic Shalwar", augments={'Mag. Acc.+25 "Mag.Atk.Bns."+25','Magic burst dmg.+5%','INT+7','Mag. Acc.+10','"Mag.Atk.Bns."+15',}},
		feet={ name="Merlinic Crackows", augments={'Mag. Acc.+20 "Mag.Atk.Bns."+20','Magic burst dmg.+9%','INT+7','Mag. Acc.+4','"Mag.Atk.Bns."+12',}},
		neck="Mizu. Kubikazari",
		waist="Yamabuki-no-Obi",
		Ear1="Friomisi Earring",
		Ear2="Hecate's Earring",
		ring1="Fenrir Ring",
		ring2="Acumen Ring",
		back="Argocham. Mantle"}
		
			sets.midcast['Enhancing Magic'] = {    main="Bolelabunga",
				sub="Ammurapi Shield",
				ammo="Kalboron Stone",
				head="Umuthi Hat",
				hands="Inyan. Dastanas +1",
				legs="Portent Pants",
				feet="Regal Pumps",
				neck="Melic Torque",
				waist="Siegel Sash",
				back="Solemnity Cape",}
			
    sets.midcast['Dark Magic'] = {main={ name="Rubicundity", augments={'Mag. Acc.+6','"Mag.Atk.Bns."+4','"Conserve MP"+3',}},
				sub="Ammurapi Shield",
				ammo="Kalboron Stone",
				head="Pixie Hairpin +1",
				body={ name="Merlinic Jubbah", augments={'Mag. Acc.+20 "Mag.Atk.Bns."+20','Magic burst dmg.+3%','CHR+9','Mag. Acc.+14','"Mag.Atk.Bns."+11',}},
				hands="Inyan. Dastanas +1",
				legs={ name="Merlinic Shalwar", augments={'Mag. Acc.+25 "Mag.Atk.Bns."+25','Magic burst dmg.+5%','INT+7','Mag. Acc.+10','"Mag.Atk.Bns."+15',}},
				feet={ name="Merlinic Crackows", augments={'Mag. Acc.+20 "Mag.Atk.Bns."+20','Magic burst dmg.+9%','INT+7','Mag. Acc.+4','"Mag.Atk.Bns."+12',}},
				neck="Erra Pendant",
				waist="Yamabuki-no-Obi",
				Ear1="Hecate's Earring",
				Ear2="Friomisi Earring",
				ring1="Evanescence Ring",
				ring2="Archon Ring",
				back="Argocham. Mantle",}


    -- Avatar pact sets.  All pacts are Ability type.
    
    sets.midcast.Pet.BloodPactWard = {    main={ name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',}},
				sub="Umbra Strap",
				ammo="Sancus Sachet",
				head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
				body="Shomonjijoe",
				hands="Inyan. Dastanas +1",
				legs="Helios Spats",
				feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
				neck="Caller's Pendant",
				waist="Lucidity Sash",
				Ear1="Evans Earring",
				Ear2="Lugalbanda earring",
				ring1="Evoker's Ring",
				back={ name="Conveyance Cape", augments={'Summoning magic skill +4','Pet: Enmity+11','Blood Pact ab. del. II -3',}}}

    sets.midcast.Pet.DebuffBloodPactWard = {main={ name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',}},
					sub="Umbra Strap",
					ammo="Sancus Sachet",
					head={ name="Apogee Crown +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
					body="Shomonjijoe",
					hands={ name="Apogee Mitts", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
					legs="Helios Spats",
					feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
					neck="Adad amulet",
					waist="Lucidity Sash",
					Ear1="Evans Earring",
					Ear2="Lugalbanda earring",
					ring1="Evoker's Ring",
					ring2="Varar Ring",
					back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}}}
        
    sets.midcast.Pet.DebuffBloodPactWard.Acc = {main={ name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',}},
					sub="Umbra Strap",
					ammo="Sancus Sachet",
					head={ name="Apogee Crown +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
					body="Shomonjijoe",
					hands={ name="Apogee Mitts", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
					legs="Helios Spats",
					feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
					neck="Adad amulet",
					waist="Lucidity Sash",
					Ear1="Evans Earring",
					Ear2="Lugalbanda earring",
					ring1="Evoker's Ring",
					ring2="Varar Ring",
					back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}}}
    
    sets.midcast.Pet.PhysicalBloodPactRage = {main="was",
						sub="elan Strap",
						ammo="Sancus Sachet",
						head={ name="Apogee Crown +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
						body="Con. Doublet +3",
						hands="Merlinic Dastanas",
						legs={ name="Apogee Slacks +1", augments={'Pet: STR+20','Blood Pact Dmg.+14','Pet: "Dbl. Atk."+4',}},
						feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
						neck="Shulmanu Collar",
						waist="Regal Belt",
						Ear1="Evans Earring",
						Ear2="Lugalbanda earring",
						ring1="Varar Ring",
						ring2="Varar Ring",
						back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}

    sets.midcast.Pet.PhysicalBloodPactRage.Acc = {main="was",
						sub="elan Strap",
						ammo="Sancus Sachet",
						head={ name="Apogee Crown +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
						body="Con. Doublet +3",
						hands="Merlinic Dastanas",
						legs={ name="Apogee Slacks +1", augments={'Pet: STR+20','Blood Pact Dmg.+14','Pet: "Dbl. Atk."+4',}},
						feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
						neck="Shulmanu Collar",
						waist="Regal Belt",
						Ear1="Evans Earring",
						Ear2="Lugalbanda earring",
						ring1="Varar Ring",
						ring2="Varar Ring",
						back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}

    sets.midcast.Pet.MagicalBloodPactRage = {main={ name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',}},
			sub="Elan Strap",
			ammo="Sancus Sachet",
			head={ name="Apogee Crown", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
			body="Con. Doublet +3",
			hands={ name="Apogee Mitts", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
			legs={ name="Apogee Slacks", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
			feet={ name="Apogee Pumps", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
			neck="Adad Amulet",
			waist="Regal Belt",
			left_ear="Evans Earring",
			right_ear="Lugalbanda Earring",
			left_ring="Varar Ring",
			right_ring="Varar Ring",
			back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}},}
    sets.midcast.Pet.MagicalBloodPactRage.Acc = {main={ name="Espiritus", augments={'Enmity-6','Pet: "Mag.Atk.Bns."+30','Pet: Damage taken -4%',}},
				sub="Elan Strap",
				ammo="Sancus Sachet",
				head={ name="Apogee Crown", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
				body="Con. Doublet +3",
				hands={ name="Apogee Mitts", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
				legs={ name="Apogee Slacks", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
				feet={ name="Apogee Pumps", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
				neck="Adad Amulet",
				waist="Regal Belt",
				left_ear="Evans Earring",
				right_ear="Lugalbanda Earring",
				left_ring="Varar Ring",
				right_ring="Varar Ring",
				back={ name="Campestres's Cape", augments={'Pet: M.Acc.+20 Pet: M.Dmg.+20','Eva.+20 /Mag. Eva.+20','Pet: Magic Damage+10','"Fast Cast"+10',}},}


    -- Spirits cast magic spells, which can be identified in standard ways.
    
    sets.midcast.Pet.WhiteMagic = {}
    
    sets.midcast.Pet['Elemental Magic'] = sets.midcast.Pet.MagicalBloodPactRage

    sets.midcast.Pet['Elemental Magic'].Resistant = sets.midcast.Pet.MagicalBloodPactRage
    

    --------------------------------------
    -- Idle/resting/defense/etc sets
    --------------------------------------
    
    -- Resting sets
    sets.resting = sets.idle
    
    -- Idle sets
    sets.idle = {    main="Was",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Shomonjijoe",
    hands="Serpentes Cuffs",
    legs="Assid. Pants +1",
    feet="Serpentes Sabots",
    neck="Caller's Pendant",
    waist="Lucidity Sash",
    Ear1="psystorm earring",
    Ear2="Friomisi Earring",
    ring1="Evoker's Ring",
    ring2="Mephitas Ring",
    back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}

    sets.idle.PDT = {    main="Was",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Shomonjijoe",
    hands="Inyan. Dastanas +1",
    legs="Assid. Pants +1",
    feet="Inyan. Crackows +1",
    neck="Twilight Torque",
    waist="Lucidity Sash",
    Ear1="psystorm earring",
    Ear2="Ethereal Earring",
    ring1="Evoker's Ring",
    ring2="Defending Ring",
    back="moonbeam Cape",}

    --sets.idle.avatar is over wrote by sets.idle.avatar.favor if you have avatar favor up it will over write.
    sets.idle.Avatar = {    main="Was",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Shomonjijoe",
    hands="Serpentes Cuffs",
    legs="Assid. Pants +1",
    feet="Apogee Pumps +1",
    neck="Caller's Pendant",
    waist="Lucidity Sash",
    Ear1="Evans Earring",
    Ear2="Friomisi Earring",
    ring1="Evoker's Ring",
    ring2="Mephitas Ring",
    back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}


    sets.idle.PDT.Avatar = {    main="Was",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Shomonjijoe",
    hands="Serpentes Cuffs",
    legs="Assid. Pants +1",
    feet="Apogee Pumps +1",
    neck="Caller's Pendant",
    waist="Lucidity Sash",
    Ear1="Evans Earring",
    Ear2="Friomisi Earring",
    ring1="Evoker's Ring",
    ring2="Mephitas Ring",
    back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}


    sets.idle.Spirit = {    main="Was",
    sub="Umbra Strap",
    ammo="Sancus Sachet",
    head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
    body="Shomonjijoe",
    hands="Serpentes Cuffs",
    legs="Assid. Pants +1",
    feet="Apogee Pumps +1",
    neck="Caller's Pendant",
    waist="Lucidity Sash",
    Ear1="Evans Earring",
    Ear2="Friomisi Earring",
    ring1="Evoker's Ring",
    ring2="Mephitas Ring",
    back={ name="Campestres's Cape", augments={'Pet: Acc.+20 Pet: R.Acc.+20 Pet: Atk.+20 Pet: R.Atk.+20','Eva.+5 /Mag. Eva.+5','Pet: "Regen"+10',}}}

	--gear automatically equiped when walking in adoulin areas is sets.Adoulin and sets.Movespeed is eqiped always when moving is detected.
	sets.Adoulin = {
        body="Councilor's Garb",
    }
	
	sets.MoveSpeed = {
		feet = "Herald's Gaiters",
	}
    sets.idle.Town = {    main="Was",
			sub="Umbra Strap",
			ammo="Sancus Sachet",
			head={ name="Glyphic Horn", augments={'Enhances "Astral Flow" effect',}},
			body="Shomonjijoe",
			hands="Serpentes Cuffs",
			legs="Assid. Pants +1",
			feet="Serpentes Sabots",
			neck="Caller's Pendant",
			waist="Lucidity Sash",
			Ear1="psystorm earring",
			Ear2="Friomisi Earring",
			ring1="Evoker's Ring",
			ring2="Mephitas Ring",
			back={ name="Mecisto. Mantle", augments={'Cap. Point+49%','VIT+1','DEF+10',}}}

    sets.idle.Avatar.Favor = {}
    sets.idle.Avatar.Melee = {    main="Was",
			sub="Umbra Strap",
			ammo="Sancus Sachet",
			head={ name="Apogee Crown +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
			body="Shomonjijoe",
			hands={ name="Apogee Mitts", augments={'MP+60','Pet: "Mag.Atk.Bns."+30','Blood Pact Dmg.+7',}},
			legs={ name="Apogee Slacks +1", augments={'Pet: STR+20','Blood Pact Dmg.+14','Pet: "Dbl. Atk."+4',}},
			feet={ name="Apogee Pumps +1", augments={'MP+80','Pet: Attack+35','Blood Pact Dmg.+8',}},
			neck="Shulmanu Collar",
			waist="Lucidity Sash",
			Ear1="Evans Earring",
			Ear2="Ethereal Earring",
			ring1="Varar Ring",
			ring2="Varar Ring",
			back={ name="Mecisto. Mantle", augments={'Cap. Point+49%','VIT+1','DEF+10',}}}
        
    sets.perp = {}
    sets.perp.Day = {}
    sets.perp.Weather = {}
    sets.perp.Carbuncle = {hands="Asteria Mitts"}
    sets.perp.Alexander = sets.midcast.Pet.BloodPactWard

    sets.perp.staff_and_grip = {}
    
    -- Defense sets
    sets.defense.PDT = {}

    sets.defense.MDT = {}

    sets.Kiting = {feet="Herald's gaiters"}
    
    sets.latent_refresh = {waist="Fucho-no-obi"}
    

    --------------------------------------
    -- Engaged sets
    --------------------------------------
    
    -- Normal melee group
    sets.engaged = {}
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
			
mov = {counter=0}
if player and player.index and windower.ffxi.get_mob_by_index(player.index) then
    mov.x = windower.ffxi.get_mob_by_index(player.index).x
    mov.y = windower.ffxi.get_mob_by_index(player.index).y
    mov.z = windower.ffxi.get_mob_by_index(player.index).z
end

moving = false
windower.raw_register_event('prerender',function()
    mov.counter = mov.counter + 1;
    if mov.counter>15 then
        local pl = windower.ffxi.get_mob_by_index(player.index)
        if pl and pl.x and mov.x then
            dist = math.sqrt( (pl.x-mov.x)^2 + (pl.y-mov.y)^2 + (pl.z-mov.z)^2 )
            if dist > 1 and not moving then
                state.Moving.value = true
                send_command('gs equip sets.MoveSpeed')
                moving = true
				
            elseif dist < 1 and moving then
                state.Moving.value = false
                send_command('gs c update')
                moving = false
            end
        end
        if pl and pl.x then
            mov.x = pl.x
            mov.y = pl.y
            mov.z = pl.z
        end
        mov.counter = 0
    end
end)


-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function pet_midcast(spell, action, spellMap, eventArgs)
    if state.Buff['Astral Conduit'] and magicalRagePacts:contains(spell.english) then
        equip(sets.midcast.Pet.MagicalBloodPactRage)
	disable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')		
	elseif state.Buff['Astral Conduit'] then
        equip(sets.midcast.Pet.PhysicalBloodPactRage)
	disable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')
	end
	if buffactive['Apogee'] and magicalRagePacts:contains(spell.english) then
       	   equip(sets.midcast.Pet.MagicalBloodPactRage)
			add_to_chat(122,'apogee magical test')
	disable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')
	elseif buffactive['Apogee'] then
			sets.precast.BloodPactRage = sets.midcast.Pet.PhysicalBloodPactRage	
			add_to_chat(122,'apogee physical test')
			disable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')	
    else return sets.precast.BloodPactRage
		end	
    end


--	if spell.type == 'BloodPactRage' and
	--	magicalRagePacts:contains(spell.english) then
	--		enable('main', 'sub', 'range', 'ammo')
	--			add_to_chat(122,'Weapons Unlocked due to magical BloodPactRage.')
	--	elseif buffactive["Aftermath: Lv.1"] or buffactive["Aftermath: Lv.2"] or player.tp > 1000 then 
	--		disable('main', 'sub', 'range', 'ammo') 
	----			add_to_chat(122,'Weapon locked Aftermath engaged MagicalBloodPactRage not detected.')
	--	elseif not buffactive["Aftermath: Lv.1"] or buffactive["Aftermath: Lv.2"] and player.tp < 1000 then 
	--		enable('main', 'sub', 'range', 'ammo')
	--			add_to_chat(122,'Weapons free')
--	end

function job_midcast(spell, action, spellMap, eventArgs)
    if state.Buff['Astral Conduit'] and pet_midaction() then
        eventArgs.handled = true
    end
end

function job_pet_midcast(spell, action, spellMap, eventArgs)
if spell.type == 'BloodPactRage' then
        if magicalRagePacts:contains(spell.english) then
            return 'MagicalBloodPactRage'
        else
            equip(sets.midcast.Pet.PhysicalBloodPactRage)
        end
    elseif spell.type == 'BloodPactWard' and spell.target.type == 'MONSTER' then
        return 'DebuffBloodPactWard'
    end
end

-- Runs when pet completes an action.
function job_pet_aftercast(spell, action, spellMap, eventArgs)
    if not spell.interrupted and spell.type == 'BloodPactWard' and spellMap ~= 'DebuffBloodPactWard' then
        wards.flag = true
        wards.spell = spell.english
        send_command('wait 4; gs c reset_ward_flag')
    end
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
if buff == "Astral Conduit" and not gain then
        enable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')
        handle_equipping_gear(player.status)
		end
if buff == "Apogee" and not gain then
        enable('main','sub','ranged','ammo','body','hands','ring1','ring2','back','waist','legs','feet')
        handle_equipping_gear(player.status)
		end
		if state.Buff[buff] ~= nil then
        handle_equipping_gear(player.status)
    elseif storms:contains(buff) then
        handle_equipping_gear(player.status)
    end
end


-- Called when the player's pet's status changes.
-- This is also called after pet_change after a pet is released.  Check for pet validity.
function job_pet_status_change(newStatus, oldStatus, eventArgs)
    if pet.isvalid and not midaction() and not pet_midaction() and (newStatus == 'Engaged' or oldStatus == 'Engaged') then
        handle_equipping_gear(player.status, newStatus)
    end
end


-- Called when a player gains or loses a pet.
-- pet == pet structure
-- gain == true if the pet was gained, false if it was lost.
function job_pet_change(petparam, gain)
    classes.CustomIdleGroups:clear()
    if gain then
        if avatars:contains(pet.name) then
            classes.CustomIdleGroups:append('Avatar')
        elseif spirits:contains(pet.name) then
            classes.CustomIdleGroups:append('Spirit')
        end
    else
      --  select_default_macro_book('reset')
    end
end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Custom spell mapping.
function job_get_spell_map(spell)
    if spell.type == 'BloodPactRage' then
        if magicalRagePacts:contains(spell.english) then
            return 'MagicalBloodPactRage'
        else
            return 'PhysicalBloodPactRage'
        end
    elseif spell.type == 'BloodPactWard' and spell.target.type == 'MONSTER' then
        return 'DebuffBloodPactWard'
    end
end

-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if pet.isvalid then
        if pet.element == world.day_element then
            idleSet = set_combine(idleSet, sets.perp.Day)
        end
        if pet.element == world.weather_element then
            idleSet = set_combine(idleSet, sets.perp.Weather)
        end
        if sets.perp[pet.name] then
            idleSet = set_combine(idleSet, sets.perp[pet.name])
        end
        gear.perp_staff.name = elements.perpetuance_staff_of[pet.element]
        if gear.perp_staff.name and (player.inventory[gear.perp_staff.name] or player.wardrobe[gear.perp_staff.name]) then
            idleSet = set_combine(idleSet, sets.perp.staff_and_grip)
        end
        if state.Buff["Avatar's Favor"] and avatars:contains(pet.name) then
            idleSet = set_combine(idleSet, sets.idle.Avatar.Favor)
        end
        if pet.status == 'Engaged' then
            idleSet = set_combine(idleSet, sets.idle.Avatar.Melee)
        end
    end
    
    if player.mpp < 51 then
        idleSet = set_combine(idleSet, sets.latent_refresh)
    end
    
    return idleSet
end

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)
    classes.CustomIdleGroups:clear()
    if pet.isvalid then
        if avatars:contains(pet.name) then
            classes.CustomIdleGroups:append('Avatar')
        elseif spirits:contains(pet.name) then
            classes.CustomIdleGroups:append('Spirit')
        end
    end
end

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
function display_current_job_state(eventArgs)

end


-------------------------------------------------------------------------------------------------------------------
-- User self-commands.
-------------------------------------------------------------------------------------------------------------------

-- Called for custom player commands.
function job_self_command(cmdParams, eventArgs)
    if cmdParams[1]:lower() == 'petweather' then
        handle_petweather()
        eventArgs.handled = true
    elseif cmdParams[1]:lower() == 'siphon' then
        handle_siphoning()
        eventArgs.handled = true
    elseif cmdParams[1]:lower() == 'pact' then
        handle_pacts(cmdParams)
        eventArgs.handled = true
    elseif cmdParams[1] == 'reset_ward_flag' then
        wards.flag = false
        wards.spell = ''
        eventArgs.handled = true
    end
end


-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

-- Cast the appopriate storm for the currently summoned avatar, if possible.
function handle_petweather()
    if player.sub_job ~= 'SCH' then
        add_to_chat(122, "You can not cast storm spells")
        return
    end
        
    if not pet.isvalid then
        add_to_chat(122, "You do not have an active avatar.")
        return
    end
    
    local element = pet.element
    if element == 'Thunder' then
        element = 'Lightning'
    end
    
    if S{'Light','Dark','Lightning'}:contains(element) then
        add_to_chat(122, 'You do not have access to '..elements.storm_of[element]..'.')
        return
    end 
    
    local storm = elements.storm_of[element]
    
    if storm then
        send_command('@input /ma "'..elements.storm_of[element]..'" <me>')
    else
        add_to_chat(123, 'Error: Unknown element ('..tostring(element)..')')
    end
end


-- Custom uber-handling of Elemental Siphon
function handle_siphoning()
    if areas.Cities:contains(world.area) then
        add_to_chat(122, 'Cannot use Elemental Siphon in a city area.')
        return
    end

    local siphonElement
    local stormElementToUse
    local releasedAvatar
    local dontRelease
    
    -- If we already have a spirit out, just use that.
    if pet.isvalid and spirits:contains(pet.name) then
        siphonElement = pet.element
        dontRelease = true
        -- If current weather doesn't match the spirit, but the spirit matches the day, try to cast the storm.
        if player.sub_job == 'SCH' and pet.element == world.day_element and pet.element ~= world.weather_element then
            if not S{'Light','Dark','Lightning'}:contains(pet.element) then
                stormElementToUse = pet.element
            end
        end
    -- If we're subbing /sch, there are some conditions where we want to make sure specific weather is up.
    -- If current (single) weather is opposed by the current day, we want to change the weather to match
    -- the current day, if possible.
    elseif player.sub_job == 'SCH' and world.weather_element ~= 'None' then
        -- We can override single-intensity weather; leave double weather alone, since even if
        -- it's partially countered by the day, it's not worth changing.
        if get_weather_intensity() == 1 then
            -- If current weather is weak to the current day, it cancels the benefits for
            -- siphon.  Change it to the day's weather if possible (+0 to +20%), or any non-weak
            -- weather if not.
            -- If the current weather matches the current avatar's element (being used to reduce
            -- perpetuation), don't change it; just accept the penalty on Siphon.
            if world.weather_element == elements.weak_to[world.day_element] and
                (not pet.isvalid or world.weather_element ~= pet.element) then
                -- We can't cast lightning/dark/light weather, so use a neutral element
                if S{'Light','Dark','Lightning'}:contains(world.day_element) then
                    stormElementToUse = 'Wind'
                else
                    stormElementToUse = world.day_element
                end
            end
        end
    end
    
    -- If we decided to use a storm, set that as the spirit element to cast.
    if stormElementToUse then
        siphonElement = stormElementToUse
    elseif world.weather_element ~= 'None' and (get_weather_intensity() == 2 or world.weather_element ~= elements.weak_to[world.day_element]) then
        siphonElement = world.weather_element
    else
        siphonElement = world.day_element
    end
    
    local command = ''
    local releaseWait = 0
    
    if pet.isvalid and avatars:contains(pet.name) then
        command = command..'input /pet "Release" <me>;wait 1.1;'
        releasedAvatar = pet.name
        releaseWait = 10
    end
    
    if stormElementToUse then
        command = command..'input /ma "'..elements.storm_of[stormElementToUse]..'" <me>;wait 4;'
        releaseWait = releaseWait - 4
    end
    
    if not (pet.isvalid and spirits:contains(pet.name)) then
        command = command..'input /ma "'..elements.spirit_of[siphonElement]..'" <me>;wait 4;'
        releaseWait = releaseWait - 4
    end
    
    command = command..'input /ja "Elemental Siphon" <me>;'
    releaseWait = releaseWait - 1
    releaseWait = releaseWait + 0.1
    
    if not dontRelease then
        if releaseWait > 0 then
            command = command..'wait '..tostring(releaseWait)..';'
        else
            command = command..'wait 1.1;'
        end
        
        command = command..'input /pet "Release" <me>;'
    end
    
    if releasedAvatar then
        command = command..'wait 1.1;input /ma "'..releasedAvatar..'" <me>'
    end
    
    send_command(command)
end


-- Handles executing blood pacts in a generic, avatar-agnostic way.
-- cmdParams is the split of the self-command.
-- gs c [pact] [pacttype]
function handle_pacts(cmdParams)
    if areas.Cities:contains(world.area) then
        add_to_chat(122, 'You cannot use pacts in town.')
        return
    end

    if not pet.isvalid then
        add_to_chat(122,'No avatar currently available. Returning to default macro set.')
       -- select_default_macro_book('reset')
        return
    end

    if spirits:contains(pet.name) then
        add_to_chat(122,'Cannot use pacts with spirits.')
        return
    end

    if not cmdParams[2] then
        add_to_chat(123,'No pact type given.')
        return
    end
    
    local pact = cmdParams[2]:lower()
    
    if not pacts[pact] then
        add_to_chat(123,'Unknown pact type: '..tostring(pact))
        return
    end
    
    if pacts[pact][pet.name] then
        if pact == 'astralflow' and not buffactive['astral flow'] then
            add_to_chat(122,'Cannot use Astral Flow pacts at this time.')
            return
        end
        
        -- Leave out target; let Shortcuts auto-determine it.
        send_command('@input /pet "'..pacts[pact][pet.name]..'"')
    else
        add_to_chat(122,pet.name..' does not have a pact of type ['..pact..'].')
    end
end


-- Event handler for updates to player skill, since we can't rely on skill being
-- correct at pet_aftercast for the creation of custom timers.
windower.raw_register_event('incoming chunk',
    function (id)
        if id == 0x62 then
            if wards.flag then
                create_pact_timer(wards.spell)
                wards.flag = false
                wards.spell = ''
            end
        end
    end)

-- Function to create custom timers using the Timers addon.  Calculates ward duration
-- based on player skill and base pact duration (defined in job_setup).
function create_pact_timer(spell_name)
    -- Create custom timers for ward pacts.
    if wards.durations[spell_name] then
        local ward_duration = wards.durations[spell_name]
        if ward_duration < 181 then
            local skill = player.skills.summoning_magic
            if skill > 300 then
                skill = skill - 300
                if skill > 200 then skill = 200 end
                ward_duration = ward_duration + skill
            end
        end
        
        local timer_cmd = 'timers c "'..spell_name..'" '..tostring(ward_duration)..' down'
        
        if wards.icons[spell_name] then
            timer_cmd = timer_cmd..' '..wards.icons[spell_name]
        end

        send_command(timer_cmd)
    end
end



 --Select default macro book on initial load or subjob change.
function select_default_macro_book(reset)
   if reset == 'reset' then
        -- lost pet, or tried to use pact when pet is gone
  end
    
 --    Default macro set/book
   set_macro_page(4, 16)
end
